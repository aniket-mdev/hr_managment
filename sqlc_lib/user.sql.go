// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const activeDeactiveUserAccount = `-- name: ActiveDeactiveUserAccount :one
update users 
set is_account_active=$2,
updated_at = CURRENT_TIMESTAMP
where id = $1
returning id, name, email, contact, password, user_type, is_account_active, created_at, updated_at
`

type ActiveDeactiveUserAccountParams struct {
	ID              uuid.UUID    `json:"id"`
	IsAccountActive sql.NullBool `json:"is_account_active"`
}

func (q *Queries) ActiveDeactiveUserAccount(ctx context.Context, arg ActiveDeactiveUserAccountParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, activeDeactiveUserAccount, arg.ID, arg.IsAccountActive)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Contact,
		&i.Password,
		&i.UserType,
		&i.IsAccountActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createAdminUser = `-- name: CreateAdminUser :one
insert into users (
    name,
    email,
    contact,
    password,
    user_type,
    is_account_active
) values (
    $1,$2,$3,$4,$5,$6
) returning id, name, email, contact, password, user_type, is_account_active, created_at, updated_at
`

type CreateAdminUserParams struct {
	Name            string       `json:"name"`
	Email           string       `json:"email"`
	Contact         string       `json:"contact"`
	Password        string       `json:"password"`
	UserType        string       `json:"user_type"`
	IsAccountActive sql.NullBool `json:"is_account_active"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createAdminUser,
		arg.Name,
		arg.Email,
		arg.Contact,
		arg.Password,
		arg.UserType,
		arg.IsAccountActive,
	)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Contact,
		&i.Password,
		&i.UserType,
		&i.IsAccountActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
select id, name, email, contact, password, user_type, is_account_active, created_at, updated_at from
users where id = $1
limit 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Contact,
		&i.Password,
		&i.UserType,
		&i.IsAccountActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
